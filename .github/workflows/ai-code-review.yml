name: 🤖 AI Code Review & Analysis

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  ai-code-review:
    name: AI-Powered Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        pip install anthropic requests python-dotenv
        pip install -r backend/requirements.txt

    - name: 🔍 AI Code Analysis
      run: |
        python << 'EOF'
        import os
        import anthropic
        import subprocess
        import json

        # Get changed files
        result = subprocess.run(['git', 'diff', '--name-only', 'origin/main...HEAD'], 
                              capture_output=True, text=True)
        changed_files = result.stdout.strip().split('\n')
        
        if not os.getenv('ANTHROPIC_API_KEY'):
            print("⚠️  ANTHROPIC_API_KEY not set, skipping AI review")
            exit(0)
            
        client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
        
        # Review each changed file
        for file in changed_files:
            if file.endswith(('.py', '.ts', '.tsx', '.js', '.jsx')):
                try:
                    with open(file, 'r') as f:
                        content = f.read()
                    
                    prompt = f"""
                    Review this NestWatch SRE monitoring code for:
                    1. Security issues (API keys, vulnerabilities)
                    2. Performance optimizations
                    3. SRE best practices
                    4. Error handling improvements
                    
                    File: {file}
                    Content:
                    {content[:2000]}...
                    
                    Provide specific, actionable feedback.
                    """
                    
                    response = client.messages.create(
                        model="claude-3-5-sonnet-20241022",
                        max_tokens=500,
                        temperature=0.1,
                        messages=[{"role": "user", "content": prompt}]
                    )
                    
                    print(f"## 🔍 AI Review: {file}")
                    print(response.content[0].text)
                    print("---")
                    
                except Exception as e:
                    print(f"⚠️  Could not review {file}: {e}")
        EOF

    - name: 🧪 Run Tests
      run: |
        # Backend tests
        cd backend
        python -m pytest tests/ --verbose || true
        
        # Frontend tests  
        cd ..
        npm test -- --passWithNoTests || true

    - name: 📊 Generate AI Insights Report
      run: |
        python << 'EOF'
        import json
        import os
        
        report = {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "pr_number": "${{ github.event.number }}",
            "ai_model": "claude-3-5-sonnet-20241022",
            "analysis_complete": True,
            "recommendations": [
                "Code review completed with AI assistance",
                "Check security recommendations above",
                "Verify all tests pass before merging"
            ]
        }
        
        with open('ai-review-report.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print("✅ AI review report generated")
        EOF

    - name: 📤 Upload Review Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ai-review-report
        path: ai-review-report.json

  security-scan:
    name: 🔒 AI Security Analysis  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Scan for Secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: 🛡️ AI Security Review
      run: |
        echo "🔍 Scanning for:"
        echo "- Hardcoded API keys"
        echo "- Exposed credentials" 
        echo "- Insecure configurations"
        echo "- SRE security best practices"
        
        # Check for common security issues
        grep -r "api_key\|password\|secret\|token" --include="*.py" --include="*.ts" --include="*.js" . || true
        
        echo "✅ Security scan complete"
